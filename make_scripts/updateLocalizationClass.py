#!/usr/bin/env python
# pylint: disable=C0103
"""Update Localization Class"""
import os
import yaml

pj = os.path.join
pn = os.path.normpath

script_path = os.path.dirname(os.path.realpath(__file__))
main_path = pn(script_path + "/..")

yaml_file = pj(main_path, "src", "Localization/en-US.yaml")
localization_file = pj(main_path, "src", "Localization.cs")

localization_file_content = '''\
//------------------------------------------------------------------------------
// <auto-generated>
// DO NOT MODIFY! Automatically generated via updateLocalizationClass.py script.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using Avalonia;
using Avalonia.Controls;

namespace NandroidDataConverter;

public class Localization
{
    public static Dictionary<string, string> Localizations { get; set; } = new Dictionary<string, string>();
\
'''

def addNewProperty(key, value):
    content = f'''\
    public static string {key[0].upper() + key[1:]}
    {{
        get
        {{
            return Localizations.GetValueOrDefault("{key}", "{key}");
        }}
    }}
\
'''
    return content


with open(yaml_file, 'r') as file:
    app_strings = yaml.safe_load(file)

    for key, value in app_strings.items():
        if type(app_strings[key]) == dict:
            for subkey, subvalue in app_strings[key].items():
                localization_file_content += addNewProperty(f"{key}_{subkey}", subvalue)
        # if multi_keys:
        #     print(app_strings[key])
        else:
            localization_file_content += addNewProperty(key, value)
localization_file_content += "}"


with open(localization_file, 'w', encoding='utf-8') as loc:
    loc.write(localization_file_content)
